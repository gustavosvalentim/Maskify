{"version":3,"sources":["maskify.js"],"names":["Element","prototype","maskify","mask","options","debug","OPTIONS","KEYCODES","SPECIALCHARS","SPLITMASK","split","setAttribute","addEventListener","HandleKeydownEvent","NextMaskChar","currentIndex","includes","event","preventDefault","console","log","key","targetValue","target","value","keyCode","slice","length","nextChar"],"mappings":"AAAA;AAEA;;;;;;;AAMAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4B,UAASC,IAAT,EAA+B;AAAA,MAAhBC,OAAgB,uEAAN,IAAM;;AACvD,MAAGA,OAAO,KAAK,IAAf,EAAqB;AACjBA,IAAAA,OAAO,GAAG;AACNC,MAAAA,KAAK,EAAE;AADD,KAAV;AAGH;;AAED,MAAMC,OAAO,GAAGF,OAAhB,CAPuD,CAQvD;;AACA,MAAMG,QAAQ,GAAG,CACb,CADa,EACT;AACJ,GAFa,EAET;AACJ,IAHa,EAGT;AACJ,IAJa,EAIT;AACJ,IALa,EAKT;AACJ,IANa,EAMT;AACJ,IAPa,EAOT;AACJ,IARa,EAQT;AACJ,IATa,CAAjB,CATuD,CAoBvD;;AACA,MAAMC,YAAY,GAAG,CACjB,GADiB,EAEjB,GAFiB,EAGjB,GAHiB,EAIjB,GAJiB,EAKjB,GALiB,EAMjB,GANiB,EAOjB,GAPiB,EAQjB,GARiB,EASjB,GATiB,EAUjB,GAViB,CAArB,CArBuD,CAiCvD;;AACA,MAAMC,SAAS,GAAGN,IAAI,CAACO,KAAL,CAAW,EAAX,CAAlB;AAEA,OAAKC,YAAL,CAAkB,aAAlB,EAAiCR,IAAjC;AACA,OAAKS,gBAAL,CAAsB,SAAtB,EAAiCC,kBAAjC;AAEA;;;;;;AAKA,WAASC,YAAT,CAAsBC,YAAtB,EAAoC;AAChCA,IAAAA,YAAY;AAEZ,QAAGP,YAAY,CAACQ,QAAb,CAAsBP,SAAS,CAACM,YAAD,CAA/B,CAAH,EAAmD,OAAON,SAAS,CAACM,YAAD,CAAhB,CAAnD,KACK,OAAO,EAAP;AACR;AAED;;;;;;;AAKA,WAASF,kBAAT,CAA4BI,KAA5B,EAAmC;AAC/B;AACAA,IAAAA,KAAK,CAACC,cAAN;AAEA;;AACA,QAAGZ,OAAO,CAACD,KAAX,EAAkB;AACdc,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,GAAlB;AACH;AAED;;;;;;AAIA,QAAIC,WAAW,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAA/B;AAEA;;;;AAGA,QAAGjB,QAAQ,CAACS,QAAT,CAAkBC,KAAK,CAACQ,OAAxB,CAAH,EAAqC;AACjC,cAAOR,KAAK,CAACQ,OAAb;AACI,aAAK,CAAL;AACIR,UAAAA,KAAK,CAACM,MAAN,CAAaC,KAAb,GAAqBF,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBJ,WAAW,CAACK,MAAZ,GAAqB,CAA1C,CAArB;AACA;;AACJ,aAAK,EAAL;AACIV,UAAAA,KAAK,CAACM,MAAN,CAAaC,KAAb,IAAsB,GAAtB;AACA;;AACJ;AACI;AARR;AAUH;AAED;;;;;AAGA,QAAGhB,YAAY,CAACQ,QAAb,CAAsBP,SAAS,CAACa,WAAW,CAACK,MAAb,CAA/B,CAAH,EAAyD;AACrDV,MAAAA,KAAK,CAACM,MAAN,CAAaC,KAAb,IAAsBf,SAAS,CAACa,WAAW,CAACK,MAAb,CAA/B;AAEA,UAAIC,QAAQ,GAAGd,YAAY,CAACQ,WAAW,CAACK,MAAb,CAA3B;AACA,UAAGC,QAAQ,KAAK,EAAhB,EAAoBX,KAAK,CAACM,MAAN,CAAaC,KAAb,IAAsBI,QAAtB;AACvB;AAED;;;;;AAGAX,IAAAA,KAAK,CAACM,MAAN,CAAaC,KAAb,IAAsBP,KAAK,CAACI,GAA5B;AACH;AACJ,CAtGD","sourcesContent":["'use strict';\n\n/**\n * Create a mask to an input and bind the element to a keydown event.\n * \n * @param {string} mask String used as the mask for the input\n * @return void\n */\nElement.prototype.maskify = function(mask, options = null) {\n    if(options === null) {\n        options = {\n            debug: false\n        }\n    }\n\n    const OPTIONS = options;\n    // Keycodes that will be processed\n    const KEYCODES = [\n        8,  // backspace\n        9,  // tab\n        13, // enter\n        16, // shift\n        17, // ctrl\n        18, // alt\n        19, // pause/break\n        20, // caps lock\n        32, // space\n    ];\n    // Special chars that will be considered when inserting masks\n    const SPECIALCHARS = [\n        '(',\n        ')',\n        '.',\n        '*',\n        '[',\n        ']',\n        '{',\n        '}',\n        '-',\n        ' '\n    ];\n    // An array including each char of the mask\n    const SPLITMASK = mask.split('');\n    \n    this.setAttribute('placeholder', mask);\n    this.addEventListener('keydown', HandleKeydownEvent);\n\n    /**\n     * Check the next character in the mask, if it is a special character return the char else return a empty string\n     * @param {integer} currentIndex Current index of the mask in the function handleKeydownEvent\n     * @return {string} special character if the next character is a special character, empty string if not\n     */\n    function NextMaskChar(currentIndex) {\n        currentIndex++;\n\n        if(SPECIALCHARS.includes(SPLITMASK[currentIndex])) return SPLITMASK[currentIndex];\n        else return '';\n    }\n    \n    /**\n     * Event binded to input that will be masked.\n     * @param {event} event - That parameter is passed by the addEventListener builtin of JavaScript.\n     * @param {string} mask - This is the mask passed in the maskify function.\n     */\n    function HandleKeydownEvent(event) {\n        /* Prevent that the user input appear before it be processed */\n        event.preventDefault();\n        \n        /* Debug ON */\n        if(OPTIONS.debug) {\n            console.log(event.key);\n        }\n\n        /**\n         * The current value of the target input\n         * This value is all the characters that already have been entered in the input\n         */\n        let targetValue = event.target.value;\n\n        /**\n         * Process the keycodes declared above\n         */\n        if(KEYCODES.includes(event.keyCode)) {\n            switch(event.keyCode) {\n                case 8:\n                    event.target.value = targetValue.slice(0, targetValue.length - 1);\n                    return;\n                case 32:\n                    event.target.value += ' ';\n                    return;\n                default:\n                    return;\n            }\n        }\n    \n        /**\n         * Process the special characteres\n         */\n        if(SPECIALCHARS.includes(SPLITMASK[targetValue.length])) {\n            event.target.value += SPLITMASK[targetValue.length];\n\n            let nextChar = NextMaskChar(targetValue.length);\n            if(nextChar !== '') event.target.value += nextChar;\n        }\n    \n        /**\n         * If the char is an alphanumeric char, include it in the input\n         */\n        event.target.value += event.key;\n    }\n}\n"],"file":"maskify.min.js"}