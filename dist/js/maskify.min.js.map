{"version":3,"sources":["maskify.js"],"names":["Element","prototype","maskify","mask","KEYCODES","SPECIALCHARS","SPLITMASK","split","addEventListener","HandleKeydownEvent","NextMaskChar","currentIndex","includes","event","preventDefault","targetValue","target","value","keyCode","slice","length","nextChar","key"],"mappings":"AAAA;AAEA;;;;;;;AAMAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4B,UAASC,IAAT,EAAe;AACvC,MAAMC,QAAQ,GAAG,CACb,CADa,EACT;AACJ,GAFa,EAET;AACJ,IAHa,EAGT;AACJ,IAJa,EAIT;AACJ,IALa,EAKT;AACJ,IANa,EAMT;AACJ,IAPa,EAOT;AACJ,IARa,EAQT;AACJ,IATa,CAAjB;AAWA,MAAMC,YAAY,GAAG,CACjB,GADiB,EAEjB,GAFiB,EAGjB,GAHiB,EAIjB,GAJiB,EAKjB,GALiB,EAMjB,GANiB,EAOjB,GAPiB,EAQjB,GARiB,EASjB,GATiB,EAUjB,GAViB,CAArB;AAYA,MAAMC,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,EAAX,CAAlB;AAEA,OAAKC,gBAAL,CAAsB,SAAtB,EAAiCC,kBAAjC;AAEA;;;;;;AAKA,WAASC,YAAT,CAAsBC,YAAtB,EAAoC;AAChCA,IAAAA,YAAY;AAEZ,QAAGN,YAAY,CAACO,QAAb,CAAsBN,SAAS,CAACK,YAAD,CAA/B,CAAH,EAAmD,OAAOL,SAAS,CAACK,YAAD,CAAhB,CAAnD,KACK,OAAO,EAAP;AACR;AAED;;;;;;;AAKA,WAASF,kBAAT,CAA4BI,KAA5B,EAAmC;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAA/B;;AAEA,QAAGb,QAAQ,CAACQ,QAAT,CAAkBC,KAAK,CAACK,OAAxB,CAAH,EAAqC;AACjC,cAAOL,KAAK,CAACK,OAAb;AACI,aAAK,CAAL;AACIL,UAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,GAAqBF,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBJ,WAAW,CAACK,MAAZ,GAAqB,CAA1C,CAArB;AACA;;AACJ,aAAK,EAAL;AACIP,UAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,IAAsB,GAAtB;AACA;;AACJ;AACI;AARR;AAUH;;AAED,QAAGZ,YAAY,CAACO,QAAb,CAAsBN,SAAS,CAACS,WAAW,CAACK,MAAb,CAA/B,CAAH,EAAyD;AACrDP,MAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,IAAsBX,SAAS,CAACS,WAAW,CAACK,MAAb,CAA/B;AAEA,UAAIC,QAAQ,GAAGX,YAAY,CAACK,WAAW,CAACK,MAAb,CAA3B;AACA,UAAGC,QAAQ,KAAK,EAAhB,EAAoBR,KAAK,CAACG,MAAN,CAAaC,KAAb,IAAsBI,QAAtB;AACvB;;AAEDR,IAAAA,KAAK,CAACG,MAAN,CAAaC,KAAb,IAAsBJ,KAAK,CAACS,GAA5B;AACH;AACJ,CAvED","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Create a mask to an input and bind the element to a keydown event.\r\n * \r\n * @param {string} mask String used as the mask for the input\r\n * @return void\r\n */\r\nElement.prototype.maskify = function(mask) {\r\n    const KEYCODES = [\r\n        8,  // backspace\r\n        9,  // tab\r\n        13, // enter\r\n        16, // shift\r\n        17, // ctrl\r\n        18, // alt\r\n        19, // pause/break\r\n        20, // caps lock\r\n        32, // space\r\n    ];\r\n    const SPECIALCHARS = [\r\n        '(',\r\n        ')',\r\n        '.',\r\n        '*',\r\n        '[',\r\n        ']',\r\n        '{',\r\n        '}',\r\n        '-',\r\n        ' '\r\n    ];\r\n    const SPLITMASK = mask.split('');\r\n    \r\n    this.addEventListener('keydown', HandleKeydownEvent);\r\n\r\n    /**\r\n     * Check the next character in the mask, if it is a special character return the char else return a empty string\r\n     * @param {integer} currentIndex Current index of the mask in the function handleKeydownEvent\r\n     * @return {string} special character if the next character is a special character, empty string if not\r\n     */\r\n    function NextMaskChar(currentIndex) {\r\n        currentIndex++;\r\n\r\n        if(SPECIALCHARS.includes(SPLITMASK[currentIndex])) return SPLITMASK[currentIndex];\r\n        else return '';\r\n    }\r\n    \r\n    /**\r\n     * Event binded to input that will be masked.\r\n     * @param {event} event - That parameter is passed by the addEventListener builtin of JavaScript.\r\n     * @param {string} mask - This is the mask passed in the maskify function.\r\n     */\r\n    function HandleKeydownEvent(event) {\r\n        event.preventDefault();\r\n        let targetValue = event.target.value;\r\n\r\n        if(KEYCODES.includes(event.keyCode)) {\r\n            switch(event.keyCode) {\r\n                case 8:\r\n                    event.target.value = targetValue.slice(0, targetValue.length - 1);\r\n                    return;\r\n                case 32:\r\n                    event.target.value += ' ';\r\n                    return;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n    \r\n        if(SPECIALCHARS.includes(SPLITMASK[targetValue.length])) {\r\n            event.target.value += SPLITMASK[targetValue.length];\r\n\r\n            let nextChar = NextMaskChar(targetValue.length);\r\n            if(nextChar !== '') event.target.value += nextChar;\r\n        }\r\n    \r\n        event.target.value += event.key;\r\n    }\r\n}"],"file":"maskify.min.js"}